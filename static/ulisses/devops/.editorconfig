# HeXXen 1733 Style Guide v1.3
# ============================
# Implementiert https://hexxen.atlassian.net/wiki/spaces/H1M/pages/25657586/Coding+Styles
# 4 Rauten markieren ein Kapitel des Style Guides
# 2 Rauten markieren eine Anweisung des Style Guides
# 1 Raute markiert editorconfig-spezifische Zusatzinfos
#
# Changelog
# =========
#
## [1.3] - 2024-11-26
# - Keine Erwartungen mehr über insert_final_newline.
#
## [1.2] - 2023-10-10
# - Ternärer Operator nicht zwingend erforderlich.
#
## [1.1] - 2023-04-25
# - Changelog hinzugefügt.
# - Option insert_final_newline auf true:none gesetzt (wird von Visual Studio anders interpretiert als von "dotnet format", muss deshalb ignoriert werden).
# - Option trim_trailing_whitespace auf true gesetzt (das war bereits der Standardwert dafür).
# 
## [1.0] - 2022-07-12
#  Initialer Release.


# Style Guide gilt für C#-Dateien
[*.cs]

#### Formatierung

## Klammersetzung nach Kernighan/Ritchie
# Einstellungen für neue Zeilen
csharp_new_line_before_catch = false
csharp_new_line_before_else = false
csharp_new_line_before_finally = false
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_open_brace = none
csharp_new_line_between_query_expression_clauses = true

# Einstellungen für Einrückung
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = false
csharp_indent_labels = flush_left
csharp_indent_switch_labels = true


## Whitespaces anstelle von Tabs
# Einzüge und Abstände
indent_size = 4
indent_style = space
tab_width = 4


## Freizeichen zwischen Cast und Ausdruck
# Einstellungen für Abstände
csharp_space_after_cast = true


## Keine Leerzeilen zwischen Attributen und ihrem Ziel


## Keine Leerzeile zwischen Backing Field und Property


## Freizeichen zwischen Operatoren
# Einstellungen für Abstände
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false


## Zeilenumbruch im Windows-Stil (Carriage Return + Line Feed).
# Einstellungen für neue Zeilen
trim_trailing_whitespace = true
end_of_line = crlf


#### Namenskonventionen
# Symbolspezifikationen
dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = *
dotnet_naming_symbols.interface.required_modifiers = 

dotnet_naming_symbols.enum.applicable_kinds = enum
dotnet_naming_symbols.enum.applicable_accessibilities = *
dotnet_naming_symbols.enum.required_modifiers = 

dotnet_naming_symbols.property.applicable_kinds = property
dotnet_naming_symbols.property.applicable_accessibilities = *
dotnet_naming_symbols.property.required_modifiers = 

dotnet_naming_symbols.type.applicable_kinds = namespace, type_parameter, class, struct, interface, enum, delegate
dotnet_naming_symbols.type.applicable_accessibilities = *
dotnet_naming_symbols.type.required_modifiers = 

dotnet_naming_symbols.protected_field.applicable_kinds = field
dotnet_naming_symbols.protected_field.applicable_accessibilities = protected, protected_internal, protected_friend
dotnet_naming_symbols.protected_field.required_modifiers = 

dotnet_naming_symbols.public_field.applicable_kinds = field
dotnet_naming_symbols.public_field.applicable_accessibilities = public, internal, friend
dotnet_naming_symbols.public_field.required_modifiers = 

dotnet_naming_symbols.local_variable.applicable_kinds = parameter, local
dotnet_naming_symbols.local_variable.applicable_accessibilities = *
dotnet_naming_symbols.local_variable.required_modifiers = 

dotnet_naming_symbols.local_function.applicable_kinds = local_function
dotnet_naming_symbols.local_function.applicable_accessibilities = *
dotnet_naming_symbols.local_function.required_modifiers = 

dotnet_naming_symbols.method_member.applicable_kinds = method
dotnet_naming_symbols.method_member.applicable_accessibilities = *
dotnet_naming_symbols.method_member.required_modifiers = 

dotnet_naming_symbols.constants.applicable_kinds = field
dotnet_naming_symbols.constants.applicable_accessibilities = *
dotnet_naming_symbols.constants.required_modifiers = const

# Benennungsstile
dotnet_naming_style.pascalcase.required_prefix = 
dotnet_naming_style.pascalcase.required_suffix = 
dotnet_naming_style.pascalcase.word_separator = 
dotnet_naming_style.pascalcase.capitalization = pascal_case

dotnet_naming_style.beginnt_mit_i.required_prefix = I
dotnet_naming_style.beginnt_mit_i.required_suffix = 
dotnet_naming_style.beginnt_mit_i.word_separator = 
dotnet_naming_style.beginnt_mit_i.capitalization = pascal_case

dotnet_naming_style.beginnt_mit_e.required_prefix = E
dotnet_naming_style.beginnt_mit_e.required_suffix = 
dotnet_naming_style.beginnt_mit_e.word_separator = 
dotnet_naming_style.beginnt_mit_e.capitalization = pascal_case

dotnet_naming_style.camelcase.required_prefix = 
dotnet_naming_style.camelcase.required_suffix = 
dotnet_naming_style.camelcase.word_separator = 
dotnet_naming_style.camelcase.capitalization = camel_case

dotnet_naming_style.oncamelcase.required_prefix = on
dotnet_naming_style.oncamelcase.required_suffix = 
dotnet_naming_style.oncamelcase.word_separator = 
dotnet_naming_style.oncamelcase.capitalization = pascal_case

dotnet_naming_style.capslock.required_prefix = 
dotnet_naming_style.capslock.required_suffix = 
dotnet_naming_style.capslock.word_separator = 
dotnet_naming_style.capslock.capitalization = all_upper


## Typen immer im PascalCase
dotnet_naming_rule.type_should_be_pascalcase.severity = warning
dotnet_naming_rule.type_should_be_pascalcase.symbols = type
dotnet_naming_rule.type_should_be_pascalcase.style = pascalcase


## Methoden, unabhängig von Position und Zugriffstyp im PascalCase
dotnet_naming_rule.method_member_should_be_pascalcase.severity = warning
dotnet_naming_rule.method_member_should_be_pascalcase.symbols = method_member
dotnet_naming_rule.method_member_should_be_pascalcase.style = pascalcase


## Private Felder im _camelCase, es sei denn, sie sind [SerializedField]
# (Regel ist durch die [SerializeField] Einschränkung nicht abbildbar)


## Protected Felder im camelCase
dotnet_naming_rule.non_method_member_should_be_camelcase.severity = warning
dotnet_naming_rule.non_method_member_should_be_camelcase.symbols = protected_field
dotnet_naming_rule.non_method_member_should_be_camelcase.style = camelcase


## Public Felder im PascalCase
dotnet_naming_rule.public_field_should_be_pascalcase.severity = warning
dotnet_naming_rule.public_field_should_be_pascalcase.symbols = public_field
dotnet_naming_rule.public_field_should_be_pascalcase.style = pascalcase


## Properties immer im PascalCase
dotnet_naming_rule.property_should_be_pascalcase.severity = warning
dotnet_naming_rule.property_should_be_pascalcase.symbols = property
dotnet_naming_rule.property_should_be_pascalcase.style = pascalcase


## I als Interface-Prefix
dotnet_naming_rule.interface_beginnt_mit_i.severity = warning
dotnet_naming_rule.interface_beginnt_mit_i.symbols = interface
dotnet_naming_rule.interface_beginnt_mit_i.style = beginnt_mit_i


## E als Enum-Prefix
dotnet_naming_rule.enum_beginnt_mit_e.severity = warning
dotnet_naming_rule.enum_beginnt_mit_e.symbols = enum
dotnet_naming_rule.enum_beginnt_mit_e.style = beginnt_mit_e


## Const-Namen immer groß geschrieben und durch _ getrennt
dotnet_naming_rule.constants_should_be_capslock.severity = warning
dotnet_naming_rule.constants_should_be_capslock.symbols = constants
dotnet_naming_rule.constants_should_be_capslock.style = capslock


## Eindeutige Variablenamen, insbesondere in Schleifen


## Parameter und lokale Variablen und im camelCase, lokale Funktionen PascalCase
dotnet_naming_rule.local_variable_should_be_camelcase.severity = warning
dotnet_naming_rule.local_variable_should_be_camelcase.symbols = local_variable
dotnet_naming_rule.local_variable_should_be_camelcase.style = camelcase

dotnet_naming_rule.local_variable_should_be_camelcase.severity = warning
dotnet_naming_rule.local_variable_should_be_camelcase.symbols = local_function
dotnet_naming_rule.local_variable_should_be_camelcase.style = pascalcase


#### Best Practices
## Immer ein "nicht gesetzt" Wert im Enum in der Datenebene.


## Code-Dokumentation über ///-Tags, zwingend in der Datenschicht


## Algorithmen immer mit Kontext-Kommentaren versehen


## Keine Find-Methoden verwenden


## Explizite Accessabilty
# Einstellungen für Modifizierer
dotnet_style_require_accessibility_modifiers = always:warning


## Minimalste Sichtbarkeit von Membern


## Immer Namespace verwenden


## Immer Assemblies verwenden, Assembly-Name = Namespace


## Kein Goto außerhalb von Switch-Anweisungen


## Typen bei Variablendeklarationen immer ausschreiben; “var” nicht verwenden
# Var-Einstellungen
csharp_style_var_elsewhere = false:warning
csharp_style_var_for_built_in_types = false:warning
csharp_style_var_when_type_is_apparent = false:warning

# new()
csharp_style_implicit_object_creation_when_type_is_apparent = true:warning


## C# 8 Musterabgleich verwenden
# Einstellungen für den Musterabgleich
csharp_style_pattern_matching_over_as_with_null_check = true:warning
csharp_style_pattern_matching_over_is_with_cast_check = true:warning
csharp_style_prefer_switch_expression = true:warning


## Blöcke immer mit Klammern umschließen
# Einstellungen für Codeblöcke
csharp_prefer_braces = true:warning


## Wegwerf-Variable nicht zwingend erforderlich
csharp_style_unused_value_assignment_preference = discard_variable:none
csharp_style_unused_value_expression_statement_preference = discard_variable:none


## Auto-Properties nicht zwingend erforderlich
dotnet_style_prefer_auto_properties = true:none


## Ternärer Operator nicht zwingend erforderlich
dotnet_style_prefer_conditional_expression_over_return = true:none
dotnet_style_prefer_conditional_expression_over_assignment = true:none


## Aliases für Standarddatentypen verwenden
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning


#### Unity Best Practices https://github.com/microsoft/Microsoft.Unity.Analyzers/blob/master/doc/index.md
## Deaktivierte Überprüfungen
dotnet_diagnostic.UNT0001.severity = none		# Empty Unity message
dotnet_diagnostic.UNT0004.severity = none		# Time.fixedDeltaTime used with Update
dotnet_diagnostic.UNT0005.severity = none		# Time.deltaTime used with FixedUpdate https://docs.unity3d.com/ScriptReference/Time-fixedDeltaTime.html
dotnet_diagnostic.UNT0013.severity = none		# Invalid or redundant SerializeField attribute
dotnet_diagnostic.UNT0017.severity = none		# SetPixels invocation is slow


## Tags mit CompareTag vergleichen
dotnet_diagnostic.UNT0002.severity = warning	# Inefficient tag comparison


## Generische Variante von GetComponent verwenden
dotnet_diagnostic.UNT0003.severity = warning	# Usage of non generic GetComponent


## Korrekte Nachrichten-Signatur verwenden
dotnet_diagnostic.UNT0006.severity = warning	# Incorrect message signature


## Unity Objekte unterstützen den "??" Operator nicht
dotnet_diagnostic.UNT0007.severity = warning	# Null coalescing on Unity objects https://stackoverflow.com/questions/58487442/why-does-resharper-not-suggest-using-null-propagation-for-both-of-these-blocks


## Unity Objekte unterstützen den ".?" Operator nicht
dotnet_diagnostic.UNT0008.severity = warning	# Null propagation on Unity objects


## [InitializeOnLoad] benötigt einen statischen Konstruktor
dotnet_diagnostic.UNT0009.severity = warning	# Missing static constructor with InitializeOnLoad


## MonoBehaviours dürfen nicht instanziiert werden
dotnet_diagnostic.UNT0010.severity = warning	# MonoBehaviour instance creation


## ScriptableObjects dürfen nicht instanziiert werden
dotnet_diagnostic.UNT0011.severity = warning	# ScriptableObject instance creation


## Coroutines dürfen kein "return" haben
dotnet_diagnostic.UNT0012.severity = warning	# Unused coroutine return value


## GetComponent nur mit Komponenten oder Schnittstellen
dotnet_diagnostic.UNT0014.severity = warning	# GetComponent called with non-Component or non-Interface type


## Methodensignatur von [InitializeOnLoadMethod] und [RuntimeInitializeOnLoadMethod] überprüfen
dotnet_diagnostic.UNT0015.severity = warning	# Incorrect method signature with InitializeOnLoadMethod or RuntimeInitializeOnLoadMethod attribute


## Invoke und StartCoroutine sollten keine hardgecodeten Strings verwenden
dotnet_diagnostic.UNT0016.severity = warning	# Unsafe way to get the method name


## Keine Reflection in Update()
dotnet_diagnostic.UNT0018.severity = warning	# System.Reflection features in performance critical messages


## GameObject.gameObject ist redundant
dotnet_diagnostic.UNT0019.severity = warning	# Unnecessary indirection call for GameObject.gameObject

## [MenuItem] erfordert eine statische Methode
dotnet_diagnostic.UNT0020.severity = warning	# MenuItem attribute used on non-static method


## Unity Nachrichten sollten protected sein
dotnet_diagnostic.UNT0021.severity = warning	# Unity message should be protected [opt-in]


## Transform.SetPositionAndRotation verwenden
dotnet_diagnostic.UNT0022.severity = warning	# Inefficient method to set position and rotation


## Unity Objekte unterstützen den "??=" Operator nicht
dotnet_diagnostic.UNT0023.severity = warning	# Coalescing assignment on Unity objects


## Vektormathematik optimieren
dotnet_diagnostic.UNT0024.severity = warning	# Give priority to scalar calculations over vector calculations


## Input.GetKey sollte keine hardgecodeten Strings verwenden
dotnet_diagnostic.UNT0025.severity = warning	# Input.GetKey overloads with KeyCode argument


## TryGetComponent ist effizienter als GetComponent, wenn die Komponente nicht existiert
dotnet_diagnostic.UNT0026.severity = warning	# GetComponent always allocates
